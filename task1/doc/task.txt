Необходимо реализовать алгоритм Винограда—Штрассена для умножения матриц: https://goo.gl/mO4cIO
Для этого предлагается реализовать вспомогательный класс, позволяющий хранить матрицы, элементы которых также являются матрицами. Это необходимо для рекурсивного построения алгоритма Штрассена.
Реализация должна быть выполнена на C++ (компилироваться без проблем в gcc), Java 8 либо Python 3.
Программа должна читать входные данные (две матрицы, произведение которых нужно вычислить) со стандартного потока ввода в формате:
N
a11 a12 a13 …
a21 a22 a23 …
…
b11 b12 b13 …
b21 b22 b23 …
…

где в первой строке подаётся N - размер матриц (число, не превышающее 512), на остальных 2N строках подаются по N неотрицательных целых чисел в каждой строке, числа записываются через пробел. Каждое число не превышает 100.

Выход программы - это N^2 элементов матрицы (a_ij)*(b_ij), записанной построчно. Разделителями чисел на выходе могут быть любые пробельные символы; вывод в нескольких строках допустим, но необязателен.
